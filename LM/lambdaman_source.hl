
// [I] Functions

let length_I = fold (\_:I. \acc:I. acc + 1) with 0 in

// (I, I) Functions

let length_II = fold (\_:(I,I). \acc:I. acc + 1) with 0 in

// [[I]] Functions

let length_LI = fold (\_:[I]. \acc:I. acc + 1) with 0 in

// Game related definitions

type map          = [[I]] in
let mapWall       = 0 in
let mapEmpty      = 1 in
let mapPill       = 2 in
let mapPowerPill  = 3 in
let mapFruit      = 4 in
let mapLMStart    = 5 in
let mapGStart     = 6 in

type lmVitality = I in

type ghostVitality         = I in
let ghostVitalityStandard  = 0 in
let ghostVitalityFright    = 1 in
let ghostVitalityInvisible = 2 in

let ghostSpeed = \n:I.
  if n == 0 then 130
  else if n == 1 then 132
  else if n == 2 then 134
  else 136
  in

let lmSpeed = 127 in
let lmPillSpeed = 10 in

type direction    = I in
let dirUp         = 0 in
let dirRight      = 1 in
let dirDown       = 2 in
let dirLeft       = 3 in

let applyDir = \d:direction. \pos:(I, I). 
  if d == dirUp then (pos[0], pos[1]-1)
  else if d == dirRight then (pos[0]+1, pos[1])
  else if d == dirDown then (pos[0], pos[1]+1)
  else (pos[0]-1, pos[1])
  in

let inBounds = \b:(I, I). \p:(I, I).
  and (and
    (p[0] >= 0)
    (p[1] >= 0)
  ) (and
    (p[0] < b[0])
    (p[1] < b[1])
  )
  in

let abs = \a:I. if a < 0 then (0-a) else a in
let min = \a:I. \b:I. if a < b then a else b in
let max = \a:I. \b:I. if a > b then a else b in
let distance = \a:(I, I). \b:(I, I). (abs (a[0]-b[0])) + (abs (a[1]-b[1])) in

type lambdaManStatus = (lmVitality, (I, I), direction, I, I) in

type ghostStatus = (ghostVitality, (I, I), direction) in

let ghostPosition = \g:ghostStatus. g[1] in
let ghostDirection = \g:ghostStatus. g[2] in

type fruitStatus = I in

type worldState = (map, lambdaManStatus, [ghostStatus], fruitStatus) in

let worldSize = \world:worldState.
  (length_I (head world[0]), length_LI world[0]) in

type node = (I, I) in
let node_lte = \x:(I, I). \y:(I, I). if x[0] == y[0] then x[1] <= y[1] else x[0] <= y[0] in
let node_eq = \x:(I, I). \y:(I, I). if x[0] == y[0] then x[1] == y[1] else 0 in
type nodeSet = btree_set_II in

type nodeNeighMap = qt32_LN in
type nodePillMap = qt32_I in
type vertex = (node, node) in
type vertexSet = btree_set_V in
type vertexPillMap = btree_map_V in

type nearestPillMap = qt32_I in

let vertex_eq = \x:vertex. \y:vertex. if node_eq x[0] y[0] then node_eq x[1] y[1] else 0 in
let vertex_lte = \x:vertex. \y:vertex. if node_eq x[0] y[0] then node_lte x[1] y[1] else node_lte x[0] y[0] in

let vertexDirection = \v:vertex. if v[0][0] == v[1][0] then dirDown else dirRight in
let vertexOKDirection = \v:vertex. \d:direction. if v[0][0] == v[1][0] then or (d == dirUp) (d == dirDown) else or (d == dirRight) (d == dirLeft) in
let normaliseVertex = \v:vertex. if node_lte v[0] v[1] then v else (v[1], v[0]) in

type NOV = <I, node, vertex> in

type graph = (nodeSet, vertexSet, qt32_NOV, nodeNeighMap, nodePillMap, vertexPillMap, nearestPillMap) in

let gNodeSet            = \g:graph. g[0] in
let gVertexSet          = \g:graph. g[1] in
let gNOV                = \g:graph. g[2] in
let gNodeNeighMap       = \g:graph. g[3] in
let gNodePillMap        = \g:graph. g[4] in
let gVertexPillMap      = \g:graph. g[5] in
let gNearestPillMap     = \g:graph. g[6] in

type userState = ((I,I),qt32_I,graph,lambdaManStatus,[ghostStatus],fruitStatus,I,btree_set_II,btree_set_II,(I,I)) in

let uWorldSize     = \u:userState. u[0] in
let uWorldMap      = \u:userState. u[1] in
let uGraph         = \u:userState. u[2] in
let uLambdaStatus  = \u:userState. u[3] in
let uGhostStatus   = \u:userState. u[4] in
let uFruitStatus   = \u:userState. u[5] in
let uUTC           = \u:userState. u[6] in
let uPillSet       = \u:userState. u[7] in
let uPowerPillSet  = \u:userState. u[8] in
let uFruitPosition = \u:userState. u[9] in

let isPassageQt = \ws:(I,I). \q:qt32_I. \p:(I, I).
  if inBounds ws p
    then
      let slot = qt32_I_at q p[0] p[1] in
      slot /= mapWall
  else 0
  in

let isPassage = \u:userState. \p:(I, I).
  if inBounds (uWorldSize u) p
    then
      let slot = qt32_I_at (uWorldMap u) p[0] p[1] in
      slot /= mapWall
    else 0
  in

// Shortest path in graph

let shortestPathMaxDepth = 16 in

let shortestPathImplementation = \maxDepth:I. \neighMap:nodeNeighMap. \heap:heap_min_V.
  let hp =
      while 
        (\acc:(qt32_I, heap_min_V, qt32_I).
          let explored = acc[0] in
          let h = acc[1] in
          (destruct
            ( \_:I. trace (0-1) in acc // Impossible
            , \hc:((I,I),node).
              let x =
                if or
                  (qt32_I_at explored hc[1][0] hc[1][1])
                  (hc[0][1] == maxDepth)
                then (heap_min_V_delete h, acc[2]) // Already explored 
                else
                  ( let hcNeigh = qt32_LN_at neighMap hc[1][0] hc[1][1] in
                      (fold (
                          \neigh:node.
                          if not (qt32_I_at explored neigh[0] neigh[1])
                            then heap_min_V_insert ((hc[0][0] + distance hc[1] neigh, hc[0][1] + 1), neigh)
                            else \x:heap_min_V.x
                        ) with (heap_min_V_delete h)
                      ) hcNeigh
                  , qt32_I_insert acc[2] hc[1][0] hc[1][1] hc[0][0]
                  )
              in
              (qt32_I_insert explored hc[1][0] hc[1][1] 1, x[0], x[1])
            )
          ) (heap_min_V_min h)
        )
      until
        (\acc:(qt32_I, heap_min_V, qt32_I).
          let explored = acc[0] in
          let h = acc[1] in
          not (heap_min_V_isempty h)
        )
      with
        (qt32_I_empty, heap, qt32_I_empty)
    in hp[2]
  in

let shortestPath = \maxDepth:I. \u:userState. \p:(I,I).
  let g = uGraph u in
  (destruct
    ( \_:I. trace (0-1) in qt32_I_empty
    , \node:node. shortestPathImplementation maxDepth (gNodeNeighMap g) (heap_min_V_singleton ((0, 0), node))
    , \_:vertex. trace (0-1) in qt32_I_empty
    )
  ) (qt32_NOV_at (gNOV g) p[0] p[1])
  in

// Map query functions

let isNode = \wSize:(I, I). \world:qt32_I. \p:(I, I).
  let x = p[0] in
  let y = p[1] in
  if not (isPassageQt wSize world (x, y))
    then 0
  else if and (and (isPassageQt wSize world (x+1, y)) (isPassageQt wSize world (x-1, y))) (and (not (isPassageQt wSize world (x, y+1))) (not (isPassageQt wSize world (x, y-1))))
    then 0
  else if and (and (isPassageQt wSize world (x, y+1)) (isPassageQt wSize world (x, y-1))) (and (not (isPassageQt wSize world (x+1, y))) (not (isPassageQt wSize world (x-1, y))))
    then 0
    else 1
  in

letrec getWay : direction -> (I, I) -> qt32_I -> (I, I) -> (I, I) = \d:direction. \wSize:(I,I). \world:qt32_I. \p:(I,I).
  let dp = applyDir d p in
  if isPassageQt wSize world dp
    then if isNode wSize world dp
      then dp
      else getWay d wSize world dp
    else p
  in

// Move picking

let pickMove = \u:userState.
  let g = uGraph u in
  let lm = uLambdaStatus u in
  let p = lm[1] in
  let curDir = lm[2] in
    let nodeNeigh = qt32_LN_at (gNodeNeighMap g) p[0] p[1] in
    let targetNode = \gh:ghostStatus.
      getWay (ghostDirection gh) (uWorldSize u) (uWorldMap u) (ghostPosition gh)
      in
    letrec targetNodes_ : I -> [ghostStatus] -> [(I,I,node,ghostStatus)] = \gi:I. \gh:[ghostStatus].
      if isempty gh
        then empty (I,I,node,ghostStatus)
        else
          let tn = targetNode (head gh) in
          cons (gi - (gi / 4), distance tn (ghostPosition (head gh)), tn, head gh) with (targetNodes_ (gi + 1) (tail gh))
      in
    let targetNodes = targetNodes_ 0 (uGhostStatus u) in
    type moveScore = (I,I,I) in
    let nodeDirection = \n:node.
      if n[0] == p[0]
        then
          if n[1] < p[1] then dirUp else dirDown
        else
          if n[0] < p[0] then dirLeft else dirRight
      in
  (destruct
    ( \_:I. trace (0-1) in dirDown
    , \p_:node.
      let moveData = \n:node. 
        let dir = nodeDirection n in
        let v = normaliseVertex (p, n) in
        let sPath = shortestPath shortestPathMaxDepth u n in
        let nPill = (qt32_I_at (gNodePillMap g) n[0] n[1]) + (destruct (\_:I. trace (0-1234, v) in 0, \x:I. x)) (btree_map_V_find v (gVertexPillMap g)) in
        ( ( (fold (
                \tNode:(I,I,node,ghostStatus). \acc:I.
                let gPosition = ghostPosition tNode[3] in
                if ( destruct
                    ( \__:I. 0
                    , \n_:node. node_eq n n_
                    , \v_:vertex. vertex_eq v v_
                    )
                ) (qt32_NOV_at (gNOV g) gPosition[0] gPosition[1])
                  then acc + 1 // If on path, acc + 1
                  else
                    let ghDist = qt32_I_at sPath tNode[2][0] tNode[2][1] in
                    if or ghDist (node_eq n tNode[2])
                      then
                        let ghDist_ = ghDist + tNode[1] in
                        if ghDist_ * ghostSpeed tNode[0] <= lmSpeed * qt32_I_at sPath p[0] p[1] + lmPillSpeed * nPill + 128
                          then acc + 1
                          else acc
                      else acc // If more than maxDepth nodes, acc
              )
              with 0
            ) targetNodes
          , nPill
          , qt32_I_at (gNearestPillMap g) n[0] n[1]
          )
        , dir
        )
        in
      letrec moveData_ : [node] -> [(moveScore, direction)] = \n:[node].
        if isempty n then empty (moveScore, direction) else cons (moveData (head n)) with (moveData_ (tail n))
        in
      let moveDatas = moveData_ nodeNeigh in
      let moveData_lte = \a:(moveScore, direction). \b:(moveScore, direction).
        let aa = a[0] in let ba = b[0] in
        if aa[0] == ba[0]
          then
            if aa[1] == ba[1]
              then
                if aa[2] == ba[2]
                  then a[1] <= b[1]
                  else aa[2] <= ba[2]
              else aa[1] >= ba[1]
          else aa[0] <= ba[0]
        in
      let moveData_min = \a:(moveScore, direction). \b:(moveScore, direction).
        if moveData_lte a b then a else b
        in
      ((fold moveData_min with ((99999, 0-99999, 99999), dirDown)) moveDatas)[1]
    , \v:vertex. if vertexOKDirection v curDir then curDir else vertexDirection v
    )
  ) (qt32_NOV_at (gNOV g) lm[1][0] lm[1][1])
  in


// Map graph

let qtFromWorld = \w:[[I]].(
  ( fold (
      \l:[I].
      \acc1:(I, qt32_I).
      let x = (
          fold (
            \s:I.
            \acc2:(I, qt32_I).
            ( acc2[0]+1
            , qt32_I_insert acc2[1] acc2[0] acc1[0] s
            )
          ) with (0, acc1[1])
        ) l
      in (acc1[0]+1, x[1])
    ) with (0, qt32_I_empty)
  ) w)[1]
  in

let qtGraphFromWorld = \wSize:(I,I). \world:qt32_I.
  ( natfold (
      \x_:I.
      let x = wSize[0]-x_ in
      \acc1:qt32_NOV.
        ( natfold (
            \y_:I.
            let y = wSize[1]-y_ in
            \acc2:qt32_NOV.
            if not (isPassageQt wSize world (x, y))
              then qt32_NOV_insert acc2 x y (make NOV 0 0)
            else if and (and (isPassageQt wSize world (x+1, y)) (isPassageQt wSize world (x-1, y))) (and (not (isPassageQt wSize world (x, y+1))) (not (isPassageQt wSize world (x, y-1))))
              then
                let a = getWay dirLeft wSize world (x,y) in
                let b = getWay dirRight wSize world (x,y) in
                qt32_NOV_insert acc2 x y (make NOV 2 (a,b))
            else if and (and (isPassageQt wSize world (x, y+1)) (isPassageQt wSize world (x, y-1))) (and (not (isPassageQt wSize world (x+1, y))) (not (isPassageQt wSize world (x-1, y))))
              then
                let a = getWay dirUp wSize world (x,y) in
                let b = getWay dirDown wSize world (x,y) in
                qt32_NOV_insert acc2 x y (make NOV 2 (a,b))
            else qt32_NOV_insert acc2 x y (make NOV 1 (x,y))
          ) with acc1
        ) wSize[1]
    ) with qt32_NOV_empty
  ) wSize[0]
  in

let makeNormalPillSet = \wSize:(I,I). \world:qt32_I.
  let pillList =
    ( natfold
      ( \x_:I.
        \acc_:[node].
        let x = wSize[0]-x_ in
        ( natfold
          ( \y_:I.
            \acc:[node].
            let y = wSize[1]-y_ in
            if or (qt32_I_at world x y == mapPill) (qt32_I_at world x y == mapPowerPill)
              then cons (x, y) with acc
              else acc
          )
          with acc_
        ) wSize[1]
      )
      with empty node
    ) wSize[0]
    in
  btree_set_II_from_list pillList
in

let makePowerPillSet = \wSize:(I,I). \world:qt32_I.
  let pillList =
    ( natfold
      ( \x_:I.
        \acc_:[node].
        let x = wSize[0]-x_ in
        ( natfold
          ( \y_:I.
            \acc:[node].
            let y = wSize[1]-y_ in
            if qt32_I_at world x y == mapPowerPill
              then cons (x, y) with acc
              else acc
          )
          with acc_
        ) wSize[1]
      )
      with empty node
    ) wSize[0]
    in
  btree_set_II_from_list pillList
in

let makeFruitPosition = \wSize:(I,I). \world:qt32_I.
  let fruitList =
    ( natfold
      ( \x_:I.
        \acc_:[node].
        let x = wSize[0]-x_ in
        ( natfold
          ( \y_:I.
            \acc:[node].
            let y = wSize[1]-y_ in
            if qt32_I_at world x y == mapFruit
              then cons (x, y) with acc
              else acc
          )
          with acc_
        ) wSize[1]
      )
      with empty node
    ) wSize[0]
    in
  head fruitList
in

let graphFromWorld = \wSize:(I,I). \world:qt32_I. \pillSet:btree_set_II.
  let nodeList = ( natfold
      ( \x_:I.
        \acc_:[node].
        let x = wSize[0]-x_ in
        ( natfold
          ( \y_:I.
            \acc:[node].
            let y = wSize[1]-y_ in
            if isNode wSize world (x, y)
              then cons (x, y) with acc
              else acc
          )
          with acc_
        ) wSize[1]
      )
      with empty node
    ) wSize[0]
    in
  let nodeSet = btree_set_II_from_list nodeList in
  let vertexList =
    ( fold (\p:node. \acc:[vertex].
        let upp = getWay dirUp wSize world p in
        let leftp = getWay dirLeft wSize world p in
        let acc_ = if node_eq upp p then acc else cons (upp, p) with acc in
        let acc__ = if node_eq leftp p then acc_ else cons (leftp, p) with acc_ in
        acc__
      ) with (empty vertex)
    ) nodeList
    in
  trace nodeList in
  trace vertexList in
  let vertexSet = btree_set_V_from_list vertexList in
  let nodeNeighMap = (fold
    (\p:node. \acc:qt32_LN.
      let nu = getWay dirUp wSize world p in
      let nd = getWay dirDown wSize world p in
      let nl = getWay dirLeft wSize world p in
      let nr = getWay dirRight wSize world p in
      let l =  if node_eq nu p then empty node else cons nu with empty node in
      let l_ =  if node_eq nd p then l else cons nd with l in
      let l__ =  if node_eq nl p then l_ else cons nl with l_ in
      let l___ =  if node_eq nr p then l__ else cons nr with l__ in
      qt32_LN_insert acc p[0] p[1] l___
    ) with qt32_LN_empty) nodeList
    in
  let nodeNeighMap_ = (fold (
      \v:vertex. \acc:nodeNeighMap.
        let l = cons v[0] with cons v[1] with empty node in
        if v[0][0] == v[1][0] // Vertical
        then
          (natfold (
              \y_:I. \acc_:nodeNeighMap.
              let x = v[0][0] in
              let y = v[0][1] + y_ in
              qt32_LN_insert acc_ x y l
            ) with acc
          ) (v[1][1] - v[0][1] - 1)
        else
          (natfold (
              \x_:I. \acc_:nodeNeighMap.
              let x = v[0][0] + x_ in
              let y = v[0][1] in
              qt32_LN_insert acc_ x y l
            ) with acc
          ) (v[1][0] - v[0][0] - 1)
    ) with nodeNeighMap) vertexList
    in 
  let nodePillMap = (fold
    (\p:node. \acc:qt32_I.
      qt32_I_insert acc p[0] p[1] (if btree_set_II_find p pillSet then 1 else 0)
    ) with qt32_I_empty) nodeList
  in
  let vertexPillMap = btree_map_V_from_set_generate
    (\v:vertex.
      if v[0][0] == v[1][0] // Vertical
        then
          (natfold (
              \y_:I. \acc:I.
              let x = v[0][0] in
              let y = v[0][1] + y_ in
              acc + (if btree_set_II_find (x,y) pillSet then 1 else 0)
            ) with 0
          ) (v[1][1] - v[0][1] - 1)
        else
          (natfold (
              \x_:I. \acc:I.
              let x = v[0][0] + x_ in
              let y = v[0][1] in
              acc + (if btree_set_II_find (x,y) pillSet then 1 else 0)
            ) with 0
          ) (v[1][0] - v[0][0] - 1)
    ) vertexSet in
  let nearestPillMapHeap = (fold
    (\p:node. \acc:heap_min_V.
      if btree_set_II_find p pillSet
        then heap_min_V_insert ((0,0),p) acc
        else
          let neigh = qt32_LN_at nodeNeighMap p[0] p[1] in
          ( fold (
              \n:node.
              \acc_:heap_min_V.
              let v = normaliseVertex (n, p) in
              (destruct
                ( \_:I. acc_
                , \x:I.
                    if x
                      then heap_min_V_insert ((0,0),p) acc_
                      else acc_
                )
              ) (btree_map_V_find v vertexPillMap)
            ) with acc
          ) neigh
    ) with heap_min_V_empty) nodeList
  in
  (nodeSet, vertexSet, qtGraphFromWorld wSize world, nodeNeighMap, nodePillMap, vertexPillMap, shortestPathImplementation 512 nodeNeighMap nearestPillMapHeap)
  in

let updateNearestPill = \p:node. \pm:nearestPillMap. pm in

let updateGraphPill = \g:graph. \p:node. 
  (destruct
    ( \_:I. g
    , \n:node.   (gNodeSet g, gVertexSet g, gNOV g, gNodeNeighMap g, qt32_I_update (gNodePillMap g) n[0] n[1] (\A:I. A - 1), gVertexPillMap g, updateNearestPill p (gNearestPillMap g))
    , \v:vertex. (gNodeSet g, gVertexSet g, gNOV g, gNodeNeighMap g, gNodePillMap g, btree_map_V_update v (\A:I. A - 1) (gVertexPillMap g), updateNearestPill p (gNearestPillMap g))
    )
  ) (qt32_NOV_at (gNOV g) p[0] p[1])
  in

// ...


let makeUserState = \world:worldState.
  let ws = worldSize world       in
  let qt = qtFromWorld world[0] in
  let pillSet = makeNormalPillSet ws qt in
  let powerPillSet = makePowerPillSet ws qt in
  (ws, qt, graphFromWorld ws qt pillSet, world[1], world[2], world[3], 1, pillSet, powerPillSet, makeFruitPosition ws qt)
  in

type stepType = userState -> worldState -> (userState, direction) in

type mainType = worldState -> ? -> (userState, stepType) in

/*
  TODO : 
  UTC is broken on death !
*/

let step =
    \u     : userState.
    \world : worldState.
    let u_ =
      ( uWorldSize u
      , uWorldMap u
      , uGraph u
      , world[1]
      , world[2]
      , world[3]
      , uUTC u + 127
      , uPillSet u
      , uPowerPillSet u
      , uFruitPosition u
    ) in
    let u__ =
      if btree_set_II_find (uLambdaStatus u_)[1] (uPillSet u_)
        then
          ( uWorldSize u_
          , uWorldMap u_
          , updateGraphPill (uGraph u_) (uLambdaStatus u_)[1]
          , uLambdaStatus u_
          , uGhostStatus u_
          , uFruitStatus u_
          , uUTC u_ + 10
          , btree_set_II_delete (uLambdaStatus u_)[1] (uPillSet u_)
          , uPowerPillSet u_
          , uFruitPosition u_
        )
      else if btree_set_II_find (uLambdaStatus u_)[1] (uPowerPillSet u_)
        then
          ( uWorldSize u_
          , uWorldMap u_
          , updateGraphPill (uGraph u_) (uLambdaStatus u_)[1]
          , uLambdaStatus u_
          , uGhostStatus u_
          , uFruitStatus u_
          , uUTC u_ + 10
          , btree_set_II_delete (uLambdaStatus u_)[1] (uPillSet u_)
          , btree_set_II_delete (uLambdaStatus u_)[1] (uPowerPillSet u_)
          , uFruitPosition u_
        )
      else if
        and
          (node_eq (uLambdaStatus u_)[1] (uFruitPosition u_))
          (uFruitStatus u_)
        then
          ( uWorldSize u_
          , uWorldMap u_
          , uGraph u_
          , uLambdaStatus u_
          , uGhostStatus u_
          , 0
          , uUTC u_ + 10
          , uPillSet u_
          , btree_set_II_delete (uLambdaStatus u_)[1] (uPowerPillSet u_)
          , uFruitPosition u_
        )
      else u_
    in
    trace (uUTC u__) in
    (u__, pickMove u__)
  in

let main =
    \world : worldState.
    \_     : ? .
    (makeUserState world, step)
  in

main
