
// [I] Functions

let length_I = fold (\_:I. \acc:I. acc + 1) with 0 in

// (I, I) Functions

let length_II = fold (\_:(I,I). \acc:I. acc + 1) with 0 in

// [[I]] Functions

let length_LI = fold (\_:[I]. \acc:I. acc + 1) with 0 in

// Game related definitions

type map          = [[I]] in
let mapWall       = 0 in
let mapEmpty      = 1 in
let mapPill       = 2 in
let mapPowerPill  = 3 in
let mapFruit      = 4 in
let mapLMStart    = 5 in
let mapGStart     = 6 in

type lmVitality = I in

type ghostVitality         = I in
let ghostVitalityStandard  = 0 in
let ghostVitalityFright    = 1 in
let ghostVitalityInvisible = 2 in

type direction    = I in
let dirUp         = 0 in
let dirRight      = 1 in
let dirDown       = 2 in
let dirLeft       = 3 in

let applyDir = \d:direction. \pos:(I, I). 
  if d == dirUp then (pos[0], pos[1]-1)
  else if d == dirRight then (pos[0]+1, pos[1])
  else if d == dirDown then (pos[0], pos[1]+1)
  else (pos[0]-1, pos[1])
  in

let inBounds = \b:(I, I). \p:(I, I).
  and (and
    (p[0] >= 0)
    (p[1] >= 0)
  ) (and
    (p[0] < b[0])
    (p[1] < b[1])
  )
  in

let abs = \a:I. if a < 0 then (0-a) else a in
let min = \a:I. \b:I. if a < b then a else b in
let max = \a:I. \b:I. if a > b then a else b in
let distance = \a:(I, I). \b:(I, I). (abs (a[0]-b[0])) + (abs (a[1]-b[1])) in

type lambdaManStatus = (lmVitality, (I, I), direction, I, I) in

type ghostStatus = (ghostVitality, (I, I), direction) in

type fruitStatus = I in

type worldState = (map, lambdaManStatus, [ghostStatus], fruitStatus) in

let worldSize = \world:worldState.
  (length_I (head world[0]), length_LI world[0]) in

type node = (I, I) in
let node_lte = \x:(I, I). \y:(I, I). if x[0] == y[0] then x[1] <= y[1] else x[0] <= y[0] in
let node_eq = \x:(I, I). \y:(I, I). if x[0] == y[0] then x[1] == y[1] else 0 in
type nodeSet = btree_set_II in
type vertex = (node, node) in
type vertexSet = btree_set_V in
// let normaliseVertex = \v:vertex. if node_lte v[0] v[1] then  in
type NOV = <I, node, vertex> in
type graph = (nodeSet, vertexSet, qt32_NOV) in

let gNodeSet       = \g:graph. g[0] in
let gVertexSet     = \g:graph. g[1] in
let gNOV           = \g:graph. g[2] in

type userState = ((I,I),qt32_I,graph,lambdaManStatus,[ghostStatus],fruitStatus,I,btree_set_II,btree_set_II,(I,I)) in

let uWorldSize     = \u:userState. u[0] in
let uWorldMap      = \u:userState. u[1] in
let uGraph         = \u:userState. u[2] in
let uLambdaStatus  = \u:userState. u[3] in
let uGhostStatus   = \u:userState. u[4] in
let uFruitStatus   = \u:userState. u[5] in
let uUTC           = \u:userState. u[6] in
let uPillSet       = \u:userState. u[7] in
let uPowerPillSet  = \u:userState. u[8] in
let uFruitPosition = \u:userState. u[9] in

let isPassageQt = \ws:(I,I). \q:qt32_I. \p:(I, I).
  if inBounds ws p
    then
      let slot = qt32_I_at q p[0] p[1] in
      slot /= mapWall
  else 0
  in

let isPassage = \u:userState. \p:(I, I).
  if inBounds (uWorldSize u) p
    then
      let slot = qt32_I_at (uWorldMap u) p[0] p[1] in
      slot /= mapWall
    else 0
  in

let isCorrectMove = \u:userState. \d:direction.
  isPassage u (applyDir d (uLambdaStatus u)[1])
  in

let distanceNearestGhost =
  \u:userState.
  \p:(I, I). (
    fold (\g:ghostStatus. \d:I. min d (distance g[1] p)) with 512
  ) (uGhostStatus u) in
let distanceNearestPill =
  \u:userState.
  \p:(I, I). 0
  in

let scoreMove = \u:userState. \d:direction.
  let next = applyDir d (uLambdaStatus u)[1] in
  if isCorrectMove u d
    then
     let dPill = distanceNearestPill u next in
     let dGhost = distanceNearestGhost u next in
     3*dGhost - 5*dPill
    else 0-10000000
in

let pickMove = \u:userState.
  let upScore = scoreMove u dirUp in
  let downScore = scoreMove u dirDown in
  let rightScore = scoreMove u dirRight in
  let leftScore = scoreMove u dirLeft in
  if upScore >= downScore
    then
      if upScore >= rightScore
        then
          if upScore >= leftScore
            then dirUp
            else dirLeft
        else
          if rightScore >= leftScore
            then dirRight
            else dirLeft
    else
      if downScore >= rightScore
        then
          if downScore >= leftScore
            then dirDown
            else dirLeft
        else
          if rightScore >= leftScore
            then dirRight
            else dirLeft
  in

// Shortest path in graph

// let shortestPathLambdaMan = \u:userState. \p:(I,I).


// Map graph

letrec getWay : direction -> (I, I) -> qt32_I -> (I, I) -> (I, I) = \d:direction. \wSize:(I,I). \world:qt32_I. \p:(I,I).
  let dp = applyDir d p in
  if isPassageQt wSize world dp
    then getWay d wSize world dp
    else p
  in

let qtFromWorld = \w:[[I]].(
  ( fold (
      \l:[I].
      \acc1:(I, qt32_I).
      let x = (
          fold (
            \s:I.
            \acc2:(I, qt32_I).
            ( acc2[0]+1
            , qt32_I_insert acc2[1] acc2[0] acc1[0] s
            )
          ) with (0, acc1[1])
        ) l
      in (acc1[0]+1, x[1])
    ) with (0, qt32_I_empty)
  ) w)[1]
  in

let qtGraphFromWorld = \wSize:(I,I). \world:qt32_I.
  ( natfold (
      \x_:I.
      let x = wSize[0]-x_ in
      \acc1:qt32_NOV.
        ( natfold (
            \y_:I.
            let y = wSize[1]-y_ in
            \acc2:qt32_NOV.
            if not (isPassageQt wSize world (x, y))
              then qt32_NOV_insert acc2 x y (make NOV 0 0)
            else if and (and (isPassageQt wSize world (x+1, y)) (isPassageQt wSize world (x-1, y))) (and (not (isPassageQt wSize world (x, y+1))) (not (isPassageQt wSize world (x, y-1))))
              then
                let a = getWay dirLeft wSize world (x,y) in
                let b = getWay dirRight wSize world (x,y) in
                qt32_NOV_insert acc2 x y (make NOV 2 (a,b))
            else if and (and (isPassageQt wSize world (x, y+1)) (isPassageQt wSize world (x, y-1))) (and (not (isPassageQt wSize world (x+1, y))) (not (isPassageQt wSize world (x-1, y))))
              then
                let a = getWay dirUp wSize world (x,y) in
                let b = getWay dirDown wSize world (x,y) in
                qt32_NOV_insert acc2 x y (make NOV 2 (a,b))
            else qt32_NOV_insert acc2 x y (make NOV 1 (x,y))
          ) with acc1
        ) wSize[1]
    ) with qt32_NOV_empty
  ) wSize[0]
  in

let makeNormalPillSet = \wSize:(I,I). \world:qt32_I.
  let pillList =
    ( natfold
      ( \x_:I.
        \acc_:[node].
        let x = wSize[0]-x_ in
        ( natfold
          ( \y_:I.
            \acc:[node].
            let y = wSize[1]-y_ in
            if qt32_I_at world x y == mapPill
              then cons (x, y) with acc
              else acc
          )
          with acc_
        ) wSize[1]
      )
      with empty node
    ) wSize[0]
    in
  btree_set_II_from_list pillList
in

let makePowerPillSet = \wSize:(I,I). \world:qt32_I.
  let pillList =
    ( natfold
      ( \x_:I.
        \acc_:[node].
        let x = wSize[0]-x_ in
        ( natfold
          ( \y_:I.
            \acc:[node].
            let y = wSize[1]-y_ in
            if qt32_I_at world x y == mapPowerPill
              then cons (x, y) with acc
              else acc
          )
          with acc_
        ) wSize[1]
      )
      with empty node
    ) wSize[0]
    in
  btree_set_II_from_list pillList
in

let makeFruitPosition = \wSize:(I,I). \world:qt32_I.
  let fruitList =
    ( natfold
      ( \x_:I.
        \acc_:[node].
        let x = wSize[0]-x_ in
        ( natfold
          ( \y_:I.
            \acc:[node].
            let y = wSize[1]-y_ in
            if qt32_I_at world x y == mapFruit
              then cons (x, y) with acc
              else acc
          )
          with acc_
        ) wSize[1]
      )
      with empty node
    ) wSize[0]
    in
  head fruitList
in

let graphFromWorld = \wSize:(I,I). \world:qt32_I.
  let nodeList =
    ( natfold
      ( \x_:I.
        \acc_:[node].
        let x = wSize[0]-x_ in
        ( natfold
          ( \y_:I.
            \acc:[node].
            let y = wSize[1]-y_ in
            if not (isPassageQt wSize world (x, y))
              then acc
            else if and (and (isPassageQt wSize world (x+1, y)) (isPassageQt wSize world (x-1, y))) (and (not (isPassageQt wSize world (x, y+1))) (not (isPassageQt wSize world (x, y-1))))
              then acc
            else if and (and (isPassageQt wSize world (x, y+1)) (isPassageQt wSize world (x, y-1))) (and (not (isPassageQt wSize world (x+1, y))) (not (isPassageQt wSize world (x-1, y))))
              then acc
            else cons (x, y) with acc
          )
          with acc_
        ) wSize[1]
      )
      with empty node
    ) wSize[0]
    in
  let nodeSet = btree_set_II_from_list nodeList in
  let vertexList =
    ( fold (\p:node. \acc:[vertex].
        let upp = getWay dirUp wSize world p in
        let leftp = getWay dirLeft wSize world p in
        let acc_ = if node_eq upp p then acc else cons (upp, p) with acc in
        let acc__ = if node_eq leftp p then acc else cons (leftp, p) with acc_ in
        acc__
      ) with (empty vertex)
    ) nodeList
    in
  let vertexSet = btree_set_V_from_list vertexList in
  (nodeSet, vertexSet, qtGraphFromWorld wSize world)
  in


// ...


let makeUserState = \world:worldState.
  let ws = worldSize world       in
  let qt = qtFromWorld world[0] in
  (ws, qt, graphFromWorld ws qt, world[1], world[2], world[3], 1, makeNormalPillSet ws qt, makePowerPillSet ws qt, makeFruitPosition ws qt)
  in

type stepType = userState -> worldState -> (userState, direction) in

type mainType = worldState -> ? -> (userState, stepType) in

/*
  TODO : 
  UTC is broken on death !
*/

let step =
    \u     : userState.
    \world : worldState.
    let u_ =
      ( uWorldSize u
      , uWorldMap u
      , uGraph u
      , world[1]
      , world[2]
      , world[3]
      , uUTC u + 127
      , uPillSet u
      , uPowerPillSet u
      , uFruitPosition u
    ) in
    let u__ =
      if btree_set_II_find (uLambdaStatus u_)[1] (uPillSet u_)
        then
          ( uWorldSize u_
          , uWorldMap u_
          , uGraph u_
          , uLambdaStatus u_
          , uGhostStatus u_
          , uFruitStatus u_
          , uUTC u_ + 10
          , btree_set_II_delete (uLambdaStatus u_)[1] (uPillSet u_)
          , uPowerPillSet u_
          , uFruitPosition u_
        )
      else if btree_set_II_find (uLambdaStatus u_)[1] (uPowerPillSet u_)
        then
          ( uWorldSize u_
          , uWorldMap u_
          , uGraph u_
          , uLambdaStatus u_
          , uGhostStatus u_
          , uFruitStatus u_
          , uUTC u_ + 10
          , uPillSet u_
          , btree_set_II_delete (uLambdaStatus u_)[1] (uPowerPillSet u_)
          , uFruitPosition u_
        )
      else if
        and
          (node_eq (uLambdaStatus u_)[1] (uFruitPosition u_))
          (uFruitStatus u_)
        then
          ( uWorldSize u_
          , uWorldMap u_
          , uGraph u_
          , uLambdaStatus u_
          , uGhostStatus u_
          , 0
          , uUTC u_ + 10
          , uPillSet u_
          , btree_set_II_delete (uLambdaStatus u_)[1] (uPowerPillSet u_)
          , uFruitPosition u_
        )
      else u_
    in
    (u__, pickMove u__)
  in

let main =
    \world : worldState.
    \_     : ? .
    (makeUserState world, step)
  in

main
