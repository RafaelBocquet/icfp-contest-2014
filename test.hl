// Utility functions

let not = \b:I.if b then 0 else 1 in
let or  = \a:I. \b:I. if b then 1 else a in
let and = \a:I. \b:I. if b then a else 0 in

// [I] Functions

let lookup_I =
    \n:I. \l:[I].
    (
      (
        fold (\m:I. \acc:(I, I).
          ( acc[0] - 1
          , if acc[0]
              then acc[1]
              else m
          )
        ) with (n, 0)
      ) l
    )[1]
  in
let length_I = fold (\_:I. \acc:I. acc + 1) with 0 in

let sum = fold (\m:I. \acc:I. acc + m) with 0 in

// [[I]] Functions

let lookup_LI =
    \n:I. \l:[[I]].
    (
      (
        fold (\m:[I]. \acc:(I, [I]).
          ( acc[0] - 1
          , if acc[0]
              then acc[1]
              else m
          )
        ) with (n, empty I)
      ) l
    )[1]
  in
let length_LI = fold (\_:[I]. \acc:I. acc + 1) with 0 in

// Game related definitions

type map          = [[I]] in
let mapWall       = 0 in
let mapEmpty      = 1 in
let mapPill       = 2 in
let mapPowerPill  = 3 in
let mapFruit      = 4 in
let mapLMStart    = 5 in
let mapGStart     = 6 in

type lmVitality = I in

type ghostVitality         = I in
let ghostVitalityStandard  = 0 in
let ghostVitalityFright    = 1 in
let ghostVitalityInvisible = 2 in

type direction    = I in
let dirUp         = 0 in
let dirRight      = 1 in
let dirDown       = 2 in
let dirLeft       = 3 in

let applyDir = \d:direction. \pos:(I, I). 
  if d == dirUp then (pos[0], pos[1]-1)
  else if d == dirRight then (pos[0]+1, pos[1])
  else if d == dirDown then (pos[0], pos[1]+1)
  else (pos[0]-1, pos[1])
  in

let inBounds = \b:(I, I). \p:(I, I).
  and (and
    (p[0] >= 0)
    (p[1] >= 0)
  ) (and
    (p[0] < b[0])
    (p[1] < b[1])
  )
  in

type lambdaManStatus = (lmVitality, (I, I), direction, I, I) in

type ghostStatus = (ghostVitality, (I, I), direction) in

type fruitStatus = I in

type worldState = (map, lambdaManStatus, [ghostStatus], fruitStatus) in

let worldSize = \world:worldState.
  (length_I (head world[0]), length_LI world[0]) in

let worldAt = \world:worldState. \p:(I, I). lookup_I p[0] (lookup_LI p[1] world[0]) in

let isPassage = \world:worldState. \p:(I, I).
  let slot = worldAt world p in slot /= mapWall
  in

let isCorrectMove = \world:worldState. \ws:(I, I). \d:direction.
  let next = applyDir d (world[1][1]) in
  if inBounds ws next
    then isPassage world next
    else 0
  in

let findGhost = \world:worldState. \p:(I, I). 0 in

let abs = \a:I. if a < 0 then (0-a) else a in
let min = \a:I. \b:I. if a < b then a else b in
let max = \a:I. \b:I. if a > b then a else b in
let distance = \a:(I, I). \b:(I, I). (abs (a[0]-b[0])) + (abs (a[1]-b[1])) in

let distanceNearestGhost =
  \world:worldState.
  \p:(I, I). (
    fold (\g:ghostStatus. \d:I. min d (distance g[1] p)) with 512
  ) world[2] in
let distanceNearestPill  =
  \world:worldState.
  \p:(I, I). ((
    fold (
      \l:[I].
      \acc1:(I, I).
      let x = (
          fold (
            \s:I.
            \acc2:(I, I).
            (acc2[0]+1, min acc2[1] (distance p (acc2[0],acc1[0])))
          ) with (0, acc1[1])
        ) l
      in (acc1[0]+1, x[1])
    ) with (0, 512)
  ) world[0])[1] in

let scoreMove = \world:worldState. \ws:(I, I). \d:direction.
  let next = applyDir d (world[1][1]) in
  if isCorrectMove world ws d
    then
     let dPill = distanceNearestPill world next in
     let dGhost = distanceNearestGhost world next in
     3*dGhost - 5 * dPill
    else 0-10000000
in

let pickMove = \world:worldState. \ws:(I, I).
  let upScore = scoreMove world ws dirUp in
  let downScore = scoreMove world ws dirDown in
  let rightScore = scoreMove world ws dirRight in
  let leftScore = scoreMove world ws dirLeft in
  if upScore >= downScore
    then
      if upScore >= rightScore
        then
          if upScore >= leftScore
            then dirUp
            else dirLeft
        else
          if rightScore >= leftScore
            then dirRight
            else dirLeft
    else
      if downScore >= rightScore
        then
          if downScore >= leftScore
            then dirDown
            else dirLeft
        else
          if rightScore >= leftScore
            then dirRight
            else dirLeft
  in

type userState = I in

type stepType = userState -> worldState -> (userState, direction) in

type mainType = worldState -> ? -> (userState, stepType) in

let step =
    \u     : userState.
    \world : worldState.
    let size = worldSize world in
    (0, pickMove world size)
  in

let main =
    \world : worldState.
    \_     : ? .
    (0, step)
  in

main